/* SPDX-License-Identifier: LGPL-2.1-or-later */

/*
 * \todo Document the interface and remove the related EXCLUDE_PATTERNS entry.
 */

module ipa.RPi;

import "include/libcamera/ipa/core.mojom";

/* Size of the LS grid allocation on VC4. */
const uint32 MaxLsGridSize = 0x8000;

struct SensorConfig {
	uint32 gainDelay;
	uint32 exposureDelay;
	uint32 vblankDelay;
	uint32 hblankDelay;
	uint32 sensorMetadata;
};

struct InitParams {
	bool lensPresent;
	/* PiSP specific */
	libcamera.SharedFD fe;
	libcamera.SharedFD be;
};

struct InitResult {
	SensorConfig sensorConfig;
	libcamera.ControlInfoMap controlInfo;
};

struct BufferIds {
	uint32 bayer;
	uint32 embedded;
	uint32 stats;
};

struct ConfigParams {
	uint32 transform;
	libcamera.ControlInfoMap sensorControls;
	libcamera.ControlInfoMap ispControls;
	libcamera.ControlInfoMap lensControls;
        /* VC4 specifc */
	libcamera.SharedFD lsTableHandle;
};

struct ConfigResult {
	float modeSensitivity;
	libcamera.ControlInfoMap controlInfo;
	libcamera.ControlList controls;
};

struct StartResult {
	libcamera.ControlList controls;
	int32 dropFrameCount;
};

struct PrepareParams {
	BufferIds buffers;
	libcamera.ControlList sensorControls;
	libcamera.ControlList requestControls;
	uint32 ipaContext;
	uint32 delayContext;
};

struct ProcessParams {
	BufferIds buffers;
	uint32 ipaContext;
};

interface IPARPiInterface {
	init(libcamera.IPASettings settings, InitParams params)
		=> (int32 ret, InitResult result);

	start(libcamera.ControlList controls) => (StartResult result);
	stop();

	configure(libcamera.IPACameraSensorInfo sensorInfo, ConfigParams params)
		=> (int32 ret, ConfigResult result);

	mapBuffers(array<libcamera.IPABuffer> buffers);
	unmapBuffers(array<uint32> ids);

	[async] signalPrepareIsp(PrepareParams params);
	[async] signalProcessStats(ProcessParams params);
};

interface IPARPiEventInterface {
	[async] prepareIspComplete(BufferIds buffers);
	[async] processStatsComplete(BufferIds buffers);
	[async] metadataReady(libcamera.ControlList metadata);
	[async] setIspControls(libcamera.ControlList controls);
	[async] setDelayedControls(libcamera.ControlList controls, uint32 delayContext);
	[async] setLensControls(libcamera.ControlList controls);
	[async] setCameraTimeout(uint32 maxFrameLengthMs);
};
 
